#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QDebug>
#include <QGraphicsPixmapItem>
#include <QWidget>
#include <QEvent>

MainWindow::MainWindow(QWidget *parent)
  : QMainWindow(parent)
  , ui(new Ui::MainWindow)
{
  mousePressed = false;

  ligne *tempLigne = new ligne();
  ballon *ligne_ballon = new ballon();
  joueur_2 *ligne_joueur_2 = new joueur_2();


  ui->setupUi(this);
  // curseur: croix
  this->setCursor(QCursor(Qt::CrossCursor));

 /* centralWidget()->setAttribute(Qt::WA_TransparentForMouseEvents);
  setMouseTracking(true);*/
}

MainWindow::~MainWindow()
{
  delete ui;
}




void MainWindow::paintEvent(QPaintEvent *event) //CrÃ©ation de la trajectoire
   {

  //Tracer actuelle


if(tempLigne->ptint.empty() != true)
{
   QPoint *intl  = new QPoint[tempLigne->ptint.size()];
  QPainter actualDraw(this);
  for(int i =0;i<tempLigne->ptint.size();i++)
  {
    intl[i] = tempLigne->ptint[i];

}
  actualDraw.drawPolyline(intl,tempLigne->ptint.size());

}


if(mesLignes.empty() != true)
 {
QPainter oldDraw(this);
for(int i =0;i<mesLignes.size();i++)
{
QPoint *oldDrawPoint  = new QPoint[mesLignes[i].ptint.size()];


  for(int j = 0;j<mesLignes[i].ptint.size();j++)
  {

    oldDrawPoint[j] = mesLignes[i].ptint[j];

  }
  oldDraw.drawPolyline(oldDrawPoint,mesLignes[i].ptint.size());
  oldDraw.setPen(QPen(Qt::green,15));
  oldDraw.drawPoint(mesLignes[i].pta);
  oldDraw.drawPoint(mesLignes[i].ptb);

  delete[] oldDrawPoint;
}

}



if(ligne_ballon->ptint.empty() != true)
{
   QPoint *intl  = new QPoint[ligne_ballon->ptint.size()];
  QPainter actualDraw(this);
  for(int i =0;i<ligne_ballon->ptint.size();i++)
  {
    intl[i] = ligne_ballon->ptint[i];

}
  actualDraw.drawPolyline(intl,ligne_ballon->ptint.size());

}


if(LeBallon.empty() != true)
 {
QPainter oldDraw(this);
for(int i =0;i<LeBallon.size();i++)
{
QPoint *oldDrawPoint  = new QPoint[LeBallon[i].ptint.size()];


  for(int j = 0;j<LeBallon[i].ptint.size();j++)
  {

    oldDrawPoint[j] = LeBallon[i].ptint[j];

  }
  oldDraw.drawPolyline(oldDrawPoint,LeBallon[i].ptint.size());
  oldDraw.setPen(QPen(Qt::blue,15));
  oldDraw.drawPoint(LeBallon[i].pta);
  oldDraw.drawPoint(LeBallon[i].ptb);

  delete[] oldDrawPoint;
}

}




if(ligne_joueur_2->ptint.empty() != true)
{
   QPoint *intl  = new QPoint[ligne_joueur_2->ptint.size()];
  QPainter actualDraw(this);
  for(int i =0;i<ligne_joueur_2->ptint.size();i++)
  {
    intl[i] = ligne_joueur_2->ptint[i];

}
  actualDraw.drawPolyline(intl,ligne_joueur_2->ptint.size());

}


if(AutreJoueur.empty() != true)
 {
QPainter oldDraw(this);
for(int i =0;i<AutreJoueur.size();i++)
{
QPoint *oldDrawPoint  = new QPoint[AutreJoueur[i].ptint.size()];


  for(int j = 0;j<AutreJoueur[i].ptint.size();j++)
  {

    oldDrawPoint[j] = AutreJoueur[i].ptint[j];

  }
  oldDraw.drawPolyline(oldDrawPoint,AutreJoueur[i].ptint.size());
  oldDraw.setPen(QPen(Qt::red,15));
  oldDraw.drawPoint(AutreJoueur[i].pta);
  oldDraw.drawPoint(AutreJoueur[i].ptb);

  delete[] oldDrawPoint;
}

}



}


void  MainWindow::mousePressEvent( QMouseEvent * event ){ //animation lors d'utilisations des clics de souris
    // position de la souris
 /* for(int i = 0; i < mesLignes.size();i++)
  {
    if(( event->pos().rx() <= mesLignes[i].pta.rx()+10) || (event->pos().ry() <= mesLignes[i].pta.ry()+10))  { isMoving = true; index = i; pt=0; return ;};
    if(event->pos()== mesLignes[i].ptb){ isMoving = true; index = i; pt=1;return ;};
  //  if(event->pos()== mesLignes[i].ptint){ isMoving = true; index = i; pt=2;return ;};

  }
*/



    if(event->button() == Qt::LeftButton)
    {
    QRect joueur1 =ui->joueur_1->geometry();
    ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
    int coordjoueur1[2] =  {joueur1.width(),joueur1.height()};
    xNew = 0+71/2;
    yNew = 0-71/2;
    newX = event->x() -xNew;
    newY = event->y() +yNew;


    QRect coord =ui->ballon->geometry();
    ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
    int coordballon[2] =  {coord.width(),coord.height()};
    xLabNew = 0+71/2;
    yLabNew = 0-71/2;
    newLabelX = event->x() -xLabNew;
    newLabelY = event->y() +yLabNew;


    ui->joueur_1->setGeometry(newX,newY,coordjoueur1[0],coordjoueur1[1]);
    if(firstPoint.isNull() )
    {
      firstPoint.setX(newX);
      firstPoint.setY(newY);
    }
    else if(lastPoint.isNull())
    {
     lastPoint.setX(newX);
      lastPoint.setY(newY);
    }
    if(!firstPoint.isNull() && !lastPoint.isNull())
    {
      this->update();
    }

    if(coordjoueur1[1] == coordballon[1])
    {
     ui->ballon->setGeometry(newLabelX+10,newLabelY+10,coordballon[0]+10,coordballon[1]+10);
     ui->joueur_1->setGeometry(newX,newY,coordballon[0],coordballon[1]);
    if(firstPoint.isNull() )
    {
      firstPoint.setX(newLabelX);
      firstPoint.setY(newLabelY);
    }
    else if(lastPoint.isNull())
    {
     lastPoint.setX(newLabelX);
      lastPoint.setY(newLabelY);
    }
    if(!firstPoint.isNull() && !lastPoint.isNull())
    {
      this->update();
    }

    }

    }



    if(event->button() == Qt::RightButton)
    {
    /*if (event->x() > ui->joueur_2->x() && event->y() > ui->joueur_2->y() && event->x() < ui->joueur_2->x()+ui->joueur_2->width() && event->y() < ui->joueur_2->y()+ui->joueur_2->height())
    {*/
    QRect coord =ui->ballon->geometry();
    ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
    int coordballon[2] =  {coord.width(),coord.height()};
    xLabNew = 0+71/2;
    yLabNew = 0-71/2;
    newLabelX = event->x() -xLabNew;
    newLabelY = event->y() +yLabNew;


    /*QRect joueur1 =ui->joueur_1->geometry();
    ui->x->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
    int coordjoueur1[2] =  {joueur1.width(),joueur1.height()};
    int xNew = 0+71/2;
    int yNew = 0-71/2;
    int newX = event->x() -xNew;
    int newY = event->y() +yNew;


    QRect joueur2 =ui->joueur_2->geometry();
    ui->x->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
    int coordjoueur2[2] =  {joueur2.width(),joueur2.height()};
    int xLab = 0+71/2;
    int yLab = 0-71/2;
    int LabelX = event->x() -xLab;
    int LabelY = event->y() +yLab;*/

    ui->ballon->setGeometry(newLabelX,newLabelY,coordballon[0],coordballon[1]);

    if(firstPoint.isNull() )
    {
      firstPoint.setX(newLabelX);
      firstPoint.setY(newLabelY);
    }
    else if(lastPoint.isNull())
    {
     lastPoint.setX(newLabelX);
      lastPoint.setY(newLabelY);
    }
    if(!firstPoint.isNull() && !lastPoint.isNull())
    {
      this->update();
    }


    /*if(coordjoueur1[2] == coordballon[2])
    {
     ui->ballon->setGeometry(newLabelX+10,newLabelY+10,coordballon[0]+10,coordballon[1]+10);
     ui->joueur_1->setGeometry(newX,newY,coordballon[0],coordballon[1]);
    if(firstPoint.isNull() )
    {
      firstPoint.setX(newLabelX);
      firstPoint.setY(newLabelY);
    }
    else if(lastPoint.isNull())
    {
     lastPoint.setX(newLabelX);
      lastPoint.setY(newLabelY);
    }
    if(!firstPoint.isNull() && !lastPoint.isNull())
    {
      this->update();
    }

    }


    if(coordjoueur2[2] == coordballon[2])
    {
     ui->ballon->setGeometry(newLabelX+10,newLabelY+10,coordballon[0]+10,coordballon[1]+10);
     ui->joueur_2->setGeometry(xLab,xLab,coordballon[0],coordballon[1]);
    if(firstPoint.isNull() )
    {
      firstPoint.setX(newLabelX);
      firstPoint.setY(newLabelY);
    }
    else if(lastPoint.isNull())
    {
     lastPoint.setX(newLabelX);
      lastPoint.setY(newLabelY);
    }
    if(!firstPoint.isNull() && !lastPoint.isNull())
    {
      this->update();
    }

    }*/

    }


    if(event->button() == Qt::MiddleButton)
    {
        QRect joueur2 =ui->joueur_2->geometry();
        ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
        int coordjoueur2[2] =  {joueur2.width(),joueur2.height()};
        xLab = 0+71/2;
        yLab = 0-71/2;
        LabelX = event->x() -xLab;
        LabelY = event->y() +yLab;


        QRect coord =ui->ballon->geometry();
        ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));
        int coordballon[2] =  {coord.width(),coord.height()};
        xLabNew = 0+71/2;
        yLabNew = 0-71/2;
        newLabelX = event->x() -xLabNew;
        newLabelY = event->y() +yLabNew;


        ui->joueur_2->setGeometry(LabelX,LabelY,coordjoueur2[0],coordjoueur2[1]);


        if(firstPoint.isNull() )
        {
          firstPoint.setX(LabelX);
          firstPoint.setY(LabelY);
        }
        else if(lastPoint.isNull())
        {
         lastPoint.setX(LabelX);
          lastPoint.setY(LabelY);
        }
        if(!firstPoint.isNull() && !lastPoint.isNull())
        {
          this->update();
        }

        if(coordjoueur2[1] == coordballon[1])
        {
         ui->ballon->setGeometry(newLabelX+10,newLabelY+10,coordballon[0]+10,coordballon[1]+10);
         ui->joueur_2->setGeometry(LabelX,LabelY,coordjoueur2[0],coordjoueur2[1]);
        if(firstPoint.isNull() )
        {
          firstPoint.setX(LabelX);
          firstPoint.setY(LabelY);
        }
        else if(lastPoint.isNull())
        {
         lastPoint.setX(LabelX);
          lastPoint.setY(LabelY);
        }
        if(!firstPoint.isNull() && !lastPoint.isNull())
        {
          this->update();
        }

        }


        }




  qDebug() << "Nombre de figure : "<< mesLignes.size();
  if (event->button() == Qt::LeftButton)
  {
    if(!tempLigne->ptint.empty())
    {
    tempLigne->ptint.clear();
    qDebug() << "Taille : "<< tempLigne->ptint.size();
     }
    tempLigne->ptint.append(event->pos());
      tempLigne->pta = event->pos();
      qDebug() << "Ajout point de dÃ©part : " << event->pos();
      isDrawing = true;
      mousePressed = true;
      update();

  }
  else if (event->button() == Qt::RightButton)
  {
      if(!ligne_ballon->ptint.empty())
      {
      ligne_ballon->ptint.clear();
      qDebug() << "Taille : "<< ligne_ballon->ptint.size();
       }
      ligne_ballon->ptint.append(event->pos());
        ligne_ballon->pta = event->pos();
        qDebug() << "Ajout point de dÃ©part : " << event->pos();
        isDrawing = true;
        mousePressed = true;
        update();
  }
  else if (event->button() == Qt::MiddleButton)
  {
      if(!ligne_joueur_2->ptint.empty())
      {
      ligne_joueur_2->ptint.clear();
      qDebug() << "Taille : "<< ligne_joueur_2->ptint.size();
       }
      ligne_joueur_2->ptint.append(event->pos());
        ligne_joueur_2->pta = event->pos();
        qDebug() << "Ajout point de dÃ©part : " << event->pos();
        isDrawing = true;
        mousePressed = true;
        update();
  }




}






void MainWindow::mouseMoveEvent(QMouseEvent *event)
{

      if(!isMoving)
      {
        ui->pos_souris->setText(QString("Position souris X:"+QString::number(event->pos().rx())+"\nPosition souris Y:"+QString::number(event->pos().ry())));
        ui->x->setText(QString("Pos X:"+QString::number(event->pos().rx())+"\nPosY:"+QString::number(event->pos().ry())));
        ui->y->setText(QString("X="+QString::number(event->x())+"\nY="+QString::number(event->y())));

        vitesse.setNum(sqrt((event->x() - event->pos().rx())+(event->y() - event->pos().ry())) / (50*10^-3));

        if ((event->buttons() & Qt::LeftButton) && isDrawing)
        {
          qDebug() << "Detect 1:" << tempLigne->ptint.size();
         tempLigne->ptint.append(event->pos());
          qDebug() << "Ajout point intermediaire : "<< event->pos();
        }
        else if ((event->buttons() & Qt::RightButton) && isDrawing)
        {
          qDebug() << "Detect 2:" << ligne_ballon->ptint.size();
         ligne_ballon->ptint.append(event->pos());
          qDebug() << "Ajout point intermediaire : "<< event->pos();
        }
        else if ((event->buttons() & Qt::MiddleButton) && isDrawing)
        {
          qDebug() << "Detect 3:" << ligne_joueur_2->ptint.size();
         ligne_joueur_2->ptint.append(event->pos());
          qDebug() << "Ajout point intermediaire : "<< event->pos();
        }
      }
      else
      {
        switch (pt)
        {
          case 0 : mesLignes[index].pta = event->pos();
          break;
          case 1 : mesLignes[index].ptint.append(event->pos());
          break;
        //  case 2 : mesLignes[index].ptint = event->pos();
          break;

        }
      }

      update();



}

void MainWindow::animationStart() //dÃ©but de l'animation
{
  if(index == 0)
  {
    qDebug() << "Lancement de l'animation";
    ui->joueur_1->move(mesLignes.last().pta);

    ui->ballon->move(LeBallon.last().pta);

    ui->joueur_2->move(AutreJoueur.last().pta);
  }
  else
   {
    if(index == mesLignes.last().ptint.size() or index == LeBallon.last().ptint.size() or index == AutreJoueur.last().ptint.size())
    {
      qDebug() << "ArrÃªt";
      index =0;
      timer->stop();
      return;
    }
    else
    {
      qDebug() << "Animation au point :" <<index;
      ui->joueur_1->move(mesLignes.last().ptint[index]);

      ui->ballon->move(LeBallon.last().ptint[index]);

      ui->joueur_2->move(AutreJoueur.last().ptint[index]);

      QString distance;
      distance.setNum(sqrt((ui->joueur_2->x() - ui->joueur_1->x()) + (ui->joueur_2->y()-ui->joueur_1->y())));
      ui->label->setText("Distance entre les deux joueurs : " + distance + " m");

      QString distance_joueur1;
      distance_joueur1.setNum(sqrt((ui->ballon->x() - ui->joueur_1->x()) + (ui->ballon->y()-ui->joueur_1->y())));
      ui->label_3->setText("Distance entre le joueur 1 et le ballon : " + distance_joueur1 + " m");

      QString distance_joueur2;
      distance_joueur2.setNum(sqrt((ui->ballon->x() - ui->joueur_2->x()) + (ui->ballon->y()-ui->joueur_2->y())));
      ui->label_4->setText("Distance entre le joueur 5 et le ballon : " + distance_joueur2 + " m");

      ui->label_2->setText("Vitesse : " + vitesse + "m/s");

    }


  }
  index++;


}

void MainWindow::mouseReleaseEvent(QMouseEvent *event)
{
  isMoving = false;
  if (event->button() == Qt::LeftButton && isDrawing)
    {

      ligne *nouvelleligne = new ligne;
      nouvelleligne->pta = tempLigne->pta;
      nouvelleligne->ptb = event->pos();
      nouvelleligne->ptint = tempLigne->ptint;
      mesLignes.append(*nouvelleligne);

      index_2 =0;
      delete nouvelleligne;
      isDrawing = false;
      mousePressed = false;
      update();

  }
  if (event->button() == Qt::RightButton && isDrawing)
  {
      ballon *nouvelleligne = new ballon;
      nouvelleligne->pta = ligne_ballon->pta;
      nouvelleligne->ptb = event->pos();
      nouvelleligne->ptint = ligne_ballon->ptint;
      LeBallon.append(*nouvelleligne);

      index_2 =0;
      delete nouvelleligne;
      isDrawing = false;
      mousePressed = false;
      update();
  }
  if (event->button() == Qt::MiddleButton && isDrawing)
  {
      joueur_2 *nouvelleligne = new joueur_2;
      nouvelleligne->pta = ligne_joueur_2->pta;
      nouvelleligne->ptb = event->pos();
      nouvelleligne->ptint = ligne_joueur_2->ptint;
      AutreJoueur.append(*nouvelleligne);

      index_2 =0;
      delete nouvelleligne;
      isDrawing = false;
      mousePressed = false;
      update();
  }
}





void MainWindow::on_start_clicked()
{
  timer = new QTimer(this);
  timer->setInterval(50);
  connect(timer, SIGNAL(timeout()),this, SLOT(animationStart()));
  timer->start();

  /*QString distance;
  distance.setNum(sqrt((ui->joueur_2->x() - ui->joueur_1->x()) + (ui->joueur_2->y()-ui->joueur_1->y())));
  ui->label->setText("Distance entre les deux joueurs : " + distance + " m");

  QString distance_joueur1;
  distance_joueur1.setNum(sqrt((ui->ballon->x() - ui->joueur_1->x()) + (ui->ballon->y()-ui->joueur_1->y())));
  ui->label_3->setText("Distance entre les deux joueurs : " + distance_joueur1 + " m");

  QString distance_joueur2;
  distance_joueur2.setNum(sqrt((ui->ballon->x() - ui->joueur_2->x()) + (ui->ballon->y()-ui->joueur_2->y())));
  ui->label_4->setText("Distance entre les deux joueurs : " + distance_joueur2 + " m");


  QString vitesse;
  vitesse.setNum((sqrt((ui->joueur_2->x() - ui->joueur_1->x()) + (ui->joueur_2->y()-ui->joueur_1->y()))) / (50*10^6));
  ui->label_2->setText("Vitesse : " + vitesse + " m/s");*/

}

void MainWindow::on_joueur1_clicked()
{
    if(joueurballon == true and joueur2ballon == false or true)
    {
        joueurballon = true;
    QRect joueur1 =ui->joueur_1->geometry();
    int coordjoueur1[2] =  {joueur1.width(),joueur1.height()};
    xNew = 0+71/2;
    yNew = 0-71/2;

    QRect coord =ui->ballon->geometry();
    int coordballon[2] =  {coord.width(),coord.height()};
    xLabNew = 0+71/2;
    yLabNew = 0-71/2;

    ui->joueur_1->setGeometry(newX,newY,coordjoueur1[0],coordjoueur1[1]);
    ui->ballon->setGeometry(newLabelX,newLabelY,coordballon[0],coordballon[1]);
    ui->joueur1->setEnabled(false);
    ui->joueur2->setEnabled(true);
}
    else{
        joueurballon = false;
        ui->joueur1->setEnabled(true);
        ui->joueur2->setEnabled(true);
    }


}



void MainWindow::on_joueur2_clicked()
{

    if(joueur2ballon == true)
    {
      joueur2ballon = true;
    QRect joueur2 =ui->joueur_2->geometry();
    int coordjoueur2[2] =  {joueur2.width(),joueur2.height()};
    xLab = 0+71/2;
    yLab = 0-71/2;

    QRect coord =ui->ballon->geometry();
    int coordballon[2] =  {coord.width(),coord.height()};
    xLabNew = 0+71/2;
    yLabNew = 0-71/2;

    ui->ballon->setGeometry(newLabelX,newLabelY,coordballon[0]+10,coordballon[1]+10);
    ui->joueur_2->setGeometry(LabelX,LabelY,coordjoueur2[0],coordjoueur2[1]);
    ui->joueur2->setEnabled(false);
    ui->joueur1->setEnabled(true);
    }
    else{
    joueur2ballon = false;
    ui->joueur2->setEnabled(true);
    ui->joueur1->setEnabled(true);
    }
}

void MainWindow::on_stop_clicked()
{
    timer->stop();
}
